.syntax--separator,
.syntax--delimiter,
.syntax--punctuation,
.syntax--bracket,
.syntax--brace,
.syntax--modifier,
.syntax--keyword,
.syntax--storage.syntax--storage {
  color: @meaningful_gray;
  background: none;
}

.syntax--string {
  color: @meaningful_green;
}

.syntax--punctuation.syntax--string {
  color: @meaningful_darkGray;
}

.syntax--name, // variables
.syntax--class,
.syntax--class.syntax--type, // class Foo
.syntax--new .syntax--type, // new Error
.syntax--module, // class Foo
.syntax--inherited-class, // extends Foo
.syntax--support.syntax--builtin.syntax--class, // Promise
.syntax--constant.syntax--math, // Math
.syntax--support.syntax--function, // require()
.syntax--require, // import = require()
.syntax--parameters .syntax--name:not(.syntax--type),
.syntax--variable {
  color: @meaningful_lightBlue;
}
.syntax--property.syntax--name,
.syntax--object-literal.syntax--key,
.syntax--accessor + .syntax--function,
.syntax--definition.syntax--method,
.syntax--object-literal.syntax--key > .syntax--quoted.syntax--string, // 'foo':, but not ['foo']:
.syntax--property {
  color: @meaningful_darkBlue;
}
.syntax--type {
  color: @meaningful_purple;
}
.syntax--console.syntax--console.syntax--console,
.syntax--component {
  color: @meaningful_yellow;
}
.syntax--attribute-name {
  color: @meaningful_darkYellow;
}
.syntax--control.syntax--flow,
.syntax--control.syntax--trycatch,
.syntax--tag.syntax--name {
  color: @meaningful_orange;
}
.syntax--constant,
.syntax--children {
  color: @meaningful_yellowGreen;
}
.syntax--accessor + .syntax--constant {
  color: @meaningful_darkBlue;
}
.syntax--operator.syntax--logical {
  color: @meaningful_orange;
}
